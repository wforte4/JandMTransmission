{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport _defineProperty from \"@babel/runtime/helpers/esm/defineProperty\";\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(Object(source), true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }\n\nimport axios, { AxiosRequestConfig } from \"axios\";\nimport { catchAxiosError } from \"./error\"; // Base Url for the rest api -- Every other directory can be accessed baseURL + \"/%s\";\n\nexport var baseConfig = {\n  baseURL: \"http://localhost:3600\"\n}; // Post a request to the Go-lang Rest Api plus catch error if necessary\n\nexport var post = function post(url, data) {\n  return axios.post(url, data, baseConfig)[\"catch\"](catchAxiosError);\n};\nexport var postFile = function postFile(url, data, config) {\n  return axios.post(url, data, config)[\"catch\"](catchAxiosError);\n}; // Get the requested json from Go-lang Rest Api plus catch error\n\nexport var get = function get(url) {\n  var config,\n      axiosConfig,\n      _args = arguments;\n  return _regeneratorRuntime.async(function get$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          config = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n          axiosConfig = _objectSpread({}, baseConfig, {}, config);\n          _context.next = 4;\n          return _regeneratorRuntime.awrap(axios.get(url, axiosConfig)[\"catch\"](catchAxiosError));\n\n        case 4:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 5:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};","map":{"version":3,"sources":["/Users/williamforte/Canvas/uncle-steven/services/restservice.js"],"names":["axios","AxiosRequestConfig","catchAxiosError","baseConfig","baseURL","post","url","data","postFile","config","get","axiosConfig"],"mappings":";;;;;;;AAAA,OAAOA,KAAP,IAAgBC,kBAAhB,QAA0C,OAA1C;AACA,SAASC,eAAT,QAAgC,SAAhC,C,CAEA;;AACA,OAAO,IAAMC,UAAU,GAAG;AACxBC,EAAAA,OAAO,EAAE;AADe,CAAnB,C,CAIP;;AACA,OAAO,IAAMC,IAAI,GAAG,SAAPA,IAAO,CAACC,GAAD,EAAMC,IAAN,EAAe;AACjC,SAAOP,KAAK,CAACK,IAAN,CAAWC,GAAX,EAAgBC,IAAhB,EAAsBJ,UAAtB,WAAwCD,eAAxC,CAAP;AACD,CAFM;AAIP,OAAO,IAAMM,QAAQ,GAAG,SAAXA,QAAW,CAACF,GAAD,EAAMC,IAAN,EAAYE,MAAZ,EAAuB;AAC7C,SAAOT,KAAK,CAACK,IAAN,CAAWC,GAAX,EAAgBC,IAAhB,EAAsBE,MAAtB,WAAoCP,eAApC,CAAP;AACD,CAFM,C,CAIP;;AACA,OAAO,IAAMQ,GAAG,GAAG,SAANA,GAAM,CAAOJ,GAAP;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAYG,UAAAA,MAAZ,2DAAqB,EAArB;AACXE,UAAAA,WADW,qBAEZR,UAFY,MAGZM,MAHY;AAAA;AAAA,2CAKJT,KAAK,CAACU,GAAN,CAAUJ,GAAV,EAAeK,WAAf,WAAkCT,eAAlC,CALI;;AAAA;AAAA;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,CAAZ","sourcesContent":["import axios, { AxiosRequestConfig } from \"axios\";\nimport { catchAxiosError } from \"./error\";\n\n// Base Url for the rest api -- Every other directory can be accessed baseURL + \"/%s\";\nexport const baseConfig = {\n  baseURL: \"http://localhost:3600\",\n};\n\n// Post a request to the Go-lang Rest Api plus catch error if necessary\nexport const post = (url, data) => {\n  return axios.post(url, data, baseConfig).catch(catchAxiosError);\n};\n\nexport const postFile = (url, data, config) => {\n  return axios.post(url, data, config).catch(catchAxiosError);\n}\n\n// Get the requested json from Go-lang Rest Api plus catch error\nexport const get = async (url, config = {}) => {\n  const axiosConfig = {\n    ...baseConfig,\n    ...config,\n  };\n  return await axios.get(url, axiosConfig).catch(catchAxiosError)\n};\n"]},"metadata":{},"sourceType":"module"}